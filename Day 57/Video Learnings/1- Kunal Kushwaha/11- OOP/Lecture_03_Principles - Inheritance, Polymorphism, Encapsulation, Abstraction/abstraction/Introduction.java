
/*
______________________________ NOTES_________________________________
Abstraction means hiding unnecessary details and showing valuable information...
---> For example, in a car we know that we need a key to run a car... But all the necessary stuff like how the internal mechanics is working like the Pistons and Engine working and stuff we dont know about it... So we can say that it is abstracted from us...

____________________________How Abstraction differs from Encapsulation?_________________
---> Encapsulation is the implementation level issue and Abstraction is the design level issue... For example, encapsulation is basically wrapping up the internal implementation of arraylist and abstraction is while hiding the internal implementation, provision of some methods like get, set etc to use them while hiding their internal implementations...

----> Abstraction focues on the things that are visible to the user while encapsulation focuses on what are the complex things to work with like making the class public or private and finalizing a keyword and hiding the data members etc 

----> Encapsulation is the process of containing the information like how to make the data members more secured and stuff and Abstraction is the process of gaining the information... Gaining is done via interfaces and abstract classes...

----> In Abstraction or data hiding, the data should be private and cannot be accessed directly while in encapsulation the data can be accessed as it can be public or private...

----> Data hiding is achieved via encapsulation...

----> Writing the code, putting the code in class,adding some methods as private, putting some getters and setters are encapsulation... But getting the main main functions and using them without having the knowledge of implementation is abstraction...

____________________________How Abstraction is done?______________________
Abstraction is done using abstract classes and interfaces...
In abstraction we will use the interfaces which is basically a structure of program and not how it does it...
---> 
*/